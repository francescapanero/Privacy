V(graph)$id
plot(graph, layout=layout_nicely,vertex.label.dist=0, vertex.size=2, vertex.label="")
graph.density(graph, loops=FALSE)
average.path.length(graph, directed=FALSE, unconnected=TRUE)
transitivity(graph, type=c("undirected"), vids=NULL)
diameter(graph, directed = FALSE, unconnected = TRUE, weights = NULL)
er1<- erdos.renyi.game(3, 0.5)
plot(er1, layout=layout.circle)
graph.density(graph, layout=layout_nicely,
vertex.label.dist=0,
vertex.size=degree(graph)/10)
graph.density(graph, layout=layout_nicely,
vertex.size=degree(graph)/10)
graph.density(graph, layout=circle,
vertex.size=degree(graph)/10)
plot(er1, layout=layout_nicely,
vertex.size=degree(graph)/10)
plot(er1, layout=layout_nicely,
vertex.size=1
)
plot(er1, layout=circle,
vertex.size=1)
plot(er1, layout=layout_circle,
vertex.size=1)
plot(er1, layout=layout.circle,
vertex.size=1)
?igraph.plot
??igraph.plotting
plot(er1, layout=layout.circle,
vsize=1)
plot(er1, layout=layout.circle,
size=2)
plot(er1, layout=layout.circle,
size=10)
plot(er1, layout=layout.circle,
vsize=10)
plot(er1, layout=layout.circle,
size2=10)
plot(er1, layout=layout.circle,
vertex.size=10)
plot(er1, layout=layout.circle,
vertex.size=20)
plot(er1, layout=layout.circle,
vertex.size=25, edge.size=10)
plot(er1, layout=layout.circle,
vertex.size=25, edge.size=20)
plot(er1, layout=layout.circle,
vertex.size=25, edge.size=30)
plot(er1, layout=layout.circle,
vertex.size=25, vertex.color=blue)
plot(er1, layout=layout.circle,
vertex.size=25, vertex.color='blue')
plot(er1, layout=layout.circle,
vertex.size=25, vertex.color='lightblue')
plot(er1, layout=layout.circle,
vertex.size=25, edge.width=10,vertex.color='lightblue')
plot(er1, layout=layout.circle,
vertex.size=25, edge.width=3,vertex.color='lightblue')
plot(er1, layout=layout.circle,
vertex.size=25, edge.width=4,vertex.color='lightblue')
# ------
# Ex 2
# ------
aids <- read.csv("http://www.stats.ox.ac.uk/~laws/SB1/data/aids.csv")
head(aids)
aids$qrt <- as.factor(aids$qrt)
plot(cases ~ date, data=aids)
logl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson)
summary(logl.glm)
sqrtl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson(link=sqrt))
summary(sqrtl.glm)
par(mfrow=c(1,2))
plot(cases ~ date, data=aids)
points(predict(logl.glm,type="response") ~ date, data=aids, pch=16)
plot(cases ~ date, data=aids)
points(predict(sqrtl.glm,type="response") ~ date, data=aids, pch=16)
sqrtlR.glm <- glm(cases ~ date, data=aids, family=poisson(link=sqrt)) DP <- deviance(sqrtl.glm)
sqrtlR.glm <- glm(cases ~ date, data=aids, family=poisson(link=sqrt))
DP <- deviance(sqrtl.glm)
DR <- deviance(sqrtlR.glm)
LRT <- DR-DP
p <- sqrtl.glm$rank
r <- sqrtlR.glm$rank
c(DP,DR,LRT,p,r)
1-pchisq(LRT,p-r)
# otherwise
anova(sqrtl.glm, test="Chisq")
n <- nrow(model.frame(sqrtl.glm))
par(mfrow=c(1,2))
plot(fitted(sqrtl.glm),rstandard(sqrtl.glm))
plot(cooks.distance(sqrtl.glm)) abline(h=8/(n-2*p), lty=2)
par(mfrow=c(1,2))
plot(fitted(sqrtl.glm),rstandard(sqrtl.glm))
plot(cooks.distance(sqrtl.glm))
abline(h=8/(n-2*p), lty=2)
lik <- function(x, y){
(1+e^(x+y))*(1+e^(x+2*y))*(1+e^(x+3*y))*(1+e^(x+4*y))/((1+e^(x+y))*(1+e^(x+2*y))*(1+e^(x+3*y))*
(1+e^(x+4*y))*(1+e^(x-y))*(1+e^(x-2*y))*
(1+e^(x-3*y))*(1+e^(x-4*y)))
}
x <- y <- seq(-5, 5, length= 40)
z <- outer(x, y, lik)
lik <- function(x, y){
(1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*(1+exp(x+4*y))/((1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*
(1+exp(x+4*y))*(1+exp(x-y))*(1+exp(x-2*y))*
(1+exp(x-3*y))*(1+exp(x-4*y)))
}
x <- y <- seq(-5, 5, length= 40)
z <- outer(x, y, lik)
persp(x, y, z)
par(mfrow=c(1,1))
persp(x, y, z)
persp(x, y, z, col = "springgreen", shade = 0.5)
# -------
# Ex 4
# -------
library(plotly)
install.packages('plotly')
# -------
# Ex 4
# -------
library(plotly)
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
x <- y <- seq(-10, 10, length= 40)
x
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
DP <- deviance(sqrtl.glm)
DR <- deviance(sqrtlR.glm)
x
# x <- seq(-10, 10, length= 40)
x <- 0
y <- seq(-10, 10, length= 40)
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
plot(y,z)
# x <- seq(-10, 10, length= 40)
x <- 10
y <- seq(-10, 10, length= 40)
z <- outer(x, y, lik)
plot(y,z)
# x <- seq(-10, 10, length= 40)
x <- seq(-10, 10, length= 40)
y <- seq(-10, 10, length= 40)
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
x<10
x=10
z <- outer(x, y, lik)
plot(z)
y
x
z <- outer(x, y, lik)
z
plot(y,z)
# x <- seq(-10, 10, length= 40)
x <- seq(-10, 10, length= 40)
x
z <- outer(x, y, lik)
z[10,]
# x <- seq(-10, 10, length= 40)
x <- seq(-10, 10, length= 40)
y <- seq(-10, 10, length= 40)
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
# x <- seq(-10, 10, length= 40)
x <- seq(-20, 20, length= 60)
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
fig.update_xaxes(autorange="reversed")
fig.update_scenes(xaxis_autorange="reversed")
# ------
# Ex 1
# ------
disease <- c(77,19,47,48,16,31)
healthy <- c(381,128,447,336,111,433)
gender <- c('M','M','M','F','F','F')
feed <- c('Bottle','Suppl','Breast','Bottle','Suppl','Breast') m <- disease + healthy
y <- disease
m <- disease + healthy
y <- disease
(X <- model.matrix(cbind(disease,healthy) ~ gender + feed))
feed <- c('Bottle','Suppl','Breast','Bottle','Suppl','Breast')
m <- disease + healthy
y <- disease
(X <- model.matrix(cbind(disease,healthy) ~ gender + feed))
# IRLS - initialise using mu=y (>0) and formulae from Sheet 3, question 1
mu <- y
eta <- log(mu/(m-mu))
z <- eta
W <- diag(c(mu*(m-mu)/m))
k <- 1
dif <- 1
beta <- solve(t(X)%*%W%*%X) %*% t(X)%*%W%*%z
while((k < 1000) && (dif>1e-05)){ k <- k+1
betao <- beta
# update eta, mu, W and z
eta <- X %*% beta
mu <- m*exp(eta)/(1+exp(eta))
W <- diag(c(mu*(m-mu)/m))
z <- eta + m*(y-mu)/(mu*(m-mu))
beta <- solve(t(X)%*%W%*%X) %*% t(X)%*%W%*%z
dif <- max(abs(betao-beta)) }
k
dif
# MLE
beta
# Fisher information
eta <- X %*% beta
mu <- m*exp(eta)/(1+exp(eta))
W <- diag(c(mu*(m-mu)/m))
Iinv <- solve(t(X)%*%W%*%X)
# standard errors
sqrt(diag(Iinv))
# ----------------------
# Ex 2
# ----------------------
# part b)
aids <- read.csv("http://www.stats.ox.ac.uk/~laws/SB1/data/aids.csv")
head(aids)
aids$qrt <- as.factor(aids$qrt)
plot(cases ~ date, data=aids)
logl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson)
summary(logl.glm)
sqrtl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson(link=sqrt))
summary(sqrtl.glm) # sqrt looks better
par(mfrow=c(1,2))
plot(cases ~ date, data=aids)
points(predict(logl.glm,type="response") ~ date, data=aids, pch=16)
plot(cases ~ date, data=aids)
points(predict(sqrtl.glm,type="response") ~ date, data=aids, pch=16) # sqrt looks better
# part c)
sqrtlR.glm <- glm(cases ~ date, data=aids, family=poisson(link=sqrt))
DP <- deviance(sqrtl.glm)
DR <- deviance(sqrtlR.glm)
LRT <- DR-DP
p <- sqrtl.glm$rank
r <- sqrtlR.glm$rank
c(DP,DR,LRT,p,r)
1-pchisq(LRT,p-r) # qrt significant
# otherwise
anova(sqrtl.glm, test="Chisq") # qrt significant
# part d)
n <- nrow(model.frame(sqrtl.glm))
par(mfrow=c(1,2))
plot(fitted(sqrtl.glm),rstandard(sqrtl.glm)) # there's a pattern!
plot(cooks.distance(sqrtl.glm)) # many points with large influence
abline(h=8/(n-2*p), lty=2) # threshold high influence
library(plotly)
lik <- function(x, y){
(1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*(1+exp(x+4*y))/((1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*
(1+exp(x+4*y))*(1+exp(x-y))*(1+exp(x-2*y))*
(1+exp(x-3*y))*(1+exp(x-4*y)))
}
lik <- function(x, y) (1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*(1+exp(x+4*y))/((1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*
(1+exp(x+4*y))*(1+exp(x-y))*(1+exp(x-2*y))*
(1+exp(x-3*y))*(1+exp(x-4*y)))
x <- seq(-20, 20, length= 60)
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
par(mfrow=c(1,1))
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
y[60]
x = 0
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
x = -5
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
x = -10
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
x = 10
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
x = -50
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
x <- seq(-20, 20, length= 60)
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig
x = 10
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
plot(y,z)
disease <- c(77,19,47,48,16,31)
healthy <- c(381,128,447,336,111,433)
gender <- c('M','M','M','F','F','F')
feed <- c('Bottle','Suppl','Breast','Bottle','Suppl','Breast')
m <- disease + healthy
y <- disease
(X <- model.matrix(cbind(disease,healthy) ~ gender + feed))
# IRLS - initialize using mu=y (>0) and formulae from PS3 Q1
mu <- y
eta <- log(mu/(m-mu))
z <- eta
W <- diag(c(mu*(m-mu)/m))
k <- 1
dif <- 1
beta <- solve(t(X)%*%W%*%X) %*% t(X)%*%W%*%z
# IRLS - iterations
while((k < 1000) && (dif>1e-05)){
k <- k+1
betao <- beta
# update eta, mu, W and z
eta <- X %*% beta
mu <- m*exp(eta)/(1+exp(eta))
W <- diag(c(mu*(m-mu)/m))
z <- eta + m*(y-mu)/(mu*(m-mu))
beta <- solve(t(X)%*%W%*%X) %*% t(X)%*%W%*%z
dif <- max(abs(betao-beta))
}
k
dif
# MLE
beta
# Fisher information
eta <- X %*% beta
mu <- m*exp(eta)/(1+exp(eta))
W <- diag(c(mu*(m-mu)/m))
Iinv <- solve(t(X)%*%W%*%X)
# standard errors
sqrt(diag(Iinv))
# part b)
aids <- read.csv("http://www.stats.ox.ac.uk/~laws/SB1/data/aids.csv")
head(aids)
aids$qrt <- as.factor(aids$qrt)
plot(cases ~ date, data=aids)
logl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson)
summary(logl.glm)
sqrtl.glm <- glm(cases ~ date + qrt, data=aids, family=poisson(link=sqrt))
summary(sqrtl.glm) # sqrt looks better for resid deviance and AIC
par(mfrow=c(1,2))
plot(cases ~ date, data=aids)
points(predict(logl.glm,type="response") ~ date, data=aids, pch=16)
plot(cases ~ date, data=aids)
points(predict(sqrtl.glm,type="response") ~ date, data=aids, pch=16) # sqrt looks better
# part c)
sqrtlR.glm <- glm(cases ~ date, data=aids, family=poisson(link=sqrt))
DP <- deviance(sqrtl.glm)
DR <- deviance(sqrtlR.glm)
LRT <- DR-DP
p <- sqrtl.glm$rank
r <- sqrtlR.glm$rank
c(DP,DR,LRT,p,r)
1-pchisq(LRT,p-r) # qrt significant
# otherwise
anova(sqrtl.glm, test="Chisq") # qrt significant
# part d)
n <- nrow(model.frame(sqrtl.glm))
par(mfrow=c(1,2))
plot(fitted(sqrtl.glm),rstandard(sqrtl.glm)) # there's a pattern!
plot(cooks.distance(sqrtl.glm)) # many points with large influence
abline(h=8/(n-2*p), lty=2) # threshold high influence
library(plotly)
par(mfrow=c(1,1))
lik <- function(x, y) (1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*(1+exp(x+4*y))/((1+exp(x+y))*(1+exp(x+2*y))*(1+exp(x+3*y))*
(1+exp(x+4*y))*(1+exp(x-y))*(1+exp(x-2*y))*
(1+exp(x-3*y))*(1+exp(x-4*y)))
x <- seq(-20, 20, length= 60)
y <- seq(-20, 20, length= 60)
z <- outer(x, y, lik)
fig <- plot_ly(z = z)
fig <- fig %>% add_surface()
fig # axes x and y are inverted
# extract data
library(MASS)
data(hills)
hills
# let's transform climb following the exercize: climb <- climb/1000
# This won't really affect the estimates cause it's just a linear transformation of x, so it's not a big deal
hills$climb <- hills$climb/1000
# Let's draw some exploratory plots
# distance vs time
plot(hills$dist, hills$time, xlab='distance', ylab='time')
text(hills$dist, hills$time, labels=rownames(hills), cex=0.7, font=1)
# climb vs time
plot(hills$climb, hills$time, xlab='climb', ylab='sqrt time')
text(hills$climb, hills$time, labels=rownames(hills), cex=0.7, font=1)
# Since we have this information, I will correct Knock Hill before proceeeding.
hills[18,3] <- 18.650
# Now, let's estimate our first linear model (warning: it is not the same of the exercize)
lm1 <- lm(time ~ dist + climb, data=hills)
summary(lm1)
t=-12.9420/2.5801
t
?pnorm
1-1*pnorm(t)
1-2*pnorm(t)
2*pnorm(t)
pnorm(t)
t
2*pt(t)
?pt
length(hills)
size(hills)
dim(hills)
2*pt(t, dim(hills)[0]-1)
dim(hills)[0]-1
2*pt(t, dim(hills)[1]-1)
1-2*pt(t, dim(hills)[1]-1)
2*(1-pt(t, dim(hills)[1]-1))
1-pt(t, dim(hills)[1]-1)
1-2*pt(|t|, dim(hills)[1]-1)
1-2*pt(-t, dim(hills)[1]-1)
pt(t, dim(hills)[1]-1)
2*pt(t, dim(hills)[1]-1)
1-pt(-t, dim(hills)[1]-1)
1-2*pt(-t, dim(hills)[1]-1)
1-2*pt(t, dim(hills)[1]-1)
2*pt(t, dim(hills)[1]-1)
2*pt(t, dim(hills)[1]-3)
setwd("~/Documents/Privacy_git/Privacy")
library(tidyverse)
library(ggpubr)
rm(list = ls())
load("data/IPMUS.RData")
source("2_functions.R")
dataset <- data_5perc
out_PY <- max_EPPF_PY(dataset$frequencies)
out_DP <- max_EPPF_DP(dataset$frequencies)
# Comparison between M_l and the expected values
M_l <- as.numeric(table(factor(dataset$frequencies, levels = 1:dataset$n)))
# Table creation
tab <- rbind(
PY = expected_m_py(1:10, dataset$n, out_PY$par[2], out_PY$par[1]),
DP = expected_m_dp(1:10, dataset$n, out_DP$par[1]),
Data = M_l[1:10]
)
colnames(tab) <- 1:10
kable(tab, digits = 0)
xtable(tab, digits=0)
p_check <- frequency_check_PY(dataset$frequencies)
p_check <- p_check + ggtitle(paste("Dataset percentage: 5%")) + theme(plot.title = element_text(hjust = 0.5, size = 10))
p_check
alpha <- 0.01 # Credible intervals percentage
out_PY <- max_EPPF_PY(dataset$frequencies)
tau1_PY <- tau1_py(dataset$m1, dataset$n, out_PY$par[1], out_PY$par[2], dataset$N)
PY_sim <- tau1_py_sim(dataset$frequencies, out_PY$par[1], out_PY$par[2], dataset$N)
PY_lower <- quantile(PY_sim, alpha / 2)
PY_upper <- quantile(PY_sim, 1 - alpha / 2)
# Dirichlet process estimation
out_DP <- max_EPPF_DP(dataset$frequencies)
tau1_DP <- tau1_dp(dataset$m1, dataset$n, out_DP$par[1], dataset$N)
DP_lower <- qhyper2(alpha / 2, out_DP$par[1] + dataset$n - 1, dataset$N - dataset$n, dataset$m1)
DP_upper <- qhyper2(1 - alpha / 2, out_DP$par[1] + dataset$n - 1, dataset$N - dataset$n, dataset$m1)
# Bethlehem and Skinner estimators
estim <- tau1_bs(dataset$frequencies, dataset$N)
tau1_bet <- estim[1]
tau1_skin <- estim[2]
tau1_cam <- tau1_np_pois(dataset$N, dataset$n, dataset$frequencies)
# Summary
kable(data.frame(
n = dataset$n, N = dataset$N, percentage = round(dataset$percentage, 2),
m1 = dataset$m1,
K_n = dataset$K_n,
true_tau1 = dataset$true_tau1,
tau1_py = tau1_PY, CI_PY = paste("[", PY_lower, ", ", PY_upper, "]", sep = ""),
tau1_dp = tau1_DP, CI_DP = paste("[", DP_lower, ", ", DP_upper, "]", sep = ""),
tau1_bet = tau1_bet, tau1_skin = tau1_skin, tau1_cam = tau1_cam
))
# Summary rounded
result <- data.frame(
N = dataset$N,
percentage = round(dataset$percentage * 100, 2),
m1 = dataset$m1,
K_n = dataset$K_n,
true_tau1 = dataset$true_tau1,
tau1_py = round(tau1_PY, 0), CI_PY = paste("[", round(PY_lower, 0), ", ", round(PY_upper, 0), "]", sep = ""),
tau1_dp = round(tau1_DP, 0), CI_DP = paste("[", round(DP_lower, 0), ", ", round(DP_upper, 0), "]", sep = ""),
tau1_bet = round(tau1_bet, 0), tau1_skin = round(tau1_skin, 0), tau1_cam = round(tau1_cam, 0)
)
# change col names
result %>%
kable(., col.names = c("N", "% sample", "# classes", "# sample uniques", "tau_1 true", "PY", "CI PY", "DP", "CI DP", "Bethelehem", "Skinner", "Camerlenghi"))
# Latex table
result %>%
kable(., "latex",
escape = F, booktabs = T, linesep = "", align = "c",
col.names = c("N", "$\\%$ sample", "$\\#$ classes", "# sample uniques", "$\\tau_1$ true", "PY", "CI PY", "DP", "CI DP", "Bethelehem", "Skinner", "Camerlenghi")
)
# Plot estimates and confidence intervals
type <- c("PY", "DP", "B", "S", "C")
estimates <- c(tau1_PY, tau1_DP, tau1_bet, tau1_skin, tau1_cam)
